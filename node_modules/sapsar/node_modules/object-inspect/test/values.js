"use strict";var inspect=require("../"),test=require("tape"),mockProperty=require("mock-property"),hasSymbols=require("has-symbols/shams")(),hasToStringTag=require("has-tostringtag/shams")();test("values",(function(t){t.plan(1);var obj=[{},[],{"a-b":5}];t.equal(inspect(obj),"[ {}, [], { 'a-b': 5 } ]")})),test("arrays with properties",(function(t){t.plan(1);var arr=[3];arr.foo="bar";var obj=[1,2,arr];obj.baz="quux",obj.index=-1,t.equal(inspect(obj),"[ 1, 2, [ 3, foo: 'bar' ], baz: 'quux', index: -1 ]")})),test("has",(function(t){t.plan(1),t.teardown(mockProperty(Object.prototype,"hasOwnProperty",{delete:!0})),t.equal(inspect({a:1,b:2}),"{ a: 1, b: 2 }")})),test("indexOf seen",(function(t){t.plan(1);var xs=[1,2,3,{}];xs.push(xs);var seen=[];seen.indexOf=void 0,t.equal(inspect(xs,{},0,seen),"[ 1, 2, 3, {}, [Circular] ]")})),test("seen seen",(function(t){t.plan(1);var xs=[1,2,3],seen=[xs];seen.indexOf=void 0,t.equal(inspect(xs,{},0,seen),"[Circular]")})),test("seen seen seen",(function(t){t.plan(1);var xs=[1,2,3],seen=[5,xs];seen.indexOf=void 0,t.equal(inspect(xs,{},0,seen),"[Circular]")})),test("symbols",{skip:!hasSymbols},(function(t){var sym=Symbol("foo");t.equal(inspect(sym),"Symbol(foo)",'Symbol("foo") should be "Symbol(foo)"'),"symbol"==typeof sym&&t.equal(inspect(Object(sym)),"Object(Symbol(foo))",'Object(Symbol("foo")) should be "Object(Symbol(foo))"'),t.test("toStringTag",{skip:!hasToStringTag},(function(st){st.plan(1);var faker={};faker[Symbol.toStringTag]="Symbol",st.equal(inspect(faker),"{ [Symbol(Symbol.toStringTag)]: 'Symbol' }","object lying about being a Symbol inspects as an object")})),t.end()})),test("Map",{skip:"function"!=typeof Map},(function(t){var map=new Map;map.set({a:1},["b"]),map.set(3,NaN);var expectedString="Map (2) {"+inspect({a:1})+" => "+inspect(["b"])+", 3 => NaN}";t.equal(inspect(map),expectedString,'new Map([[{ a: 1 }, ["b"]], [3, NaN]]) should show size and contents'),t.equal(inspect(new Map),"Map (0) {}","empty Map should show as empty");var nestedMap=new Map;nestedMap.set(nestedMap,map),t.equal(inspect(nestedMap),"Map (1) {[Circular] => "+expectedString+"}","Map containing a Map should work"),t.end()})),test("WeakMap",{skip:"function"!=typeof WeakMap},(function(t){var map=new WeakMap;map.set({a:1},["b"]);var expectedString="WeakMap { ? }";t.equal(inspect(map),expectedString,'new WeakMap([[{ a: 1 }, ["b"]]]) should not show size or contents'),t.equal(inspect(new WeakMap),"WeakMap { ? }","empty WeakMap should not show as empty"),t.end()})),test("Set",{skip:"function"!=typeof Set},(function(t){var set=new Set;set.add({a:1}),set.add(["b"]);var expectedString="Set (2) {"+inspect({a:1})+", "+inspect(["b"])+"}";t.equal(inspect(set),expectedString,'new Set([{ a: 1 }, ["b"]]) should show size and contents'),t.equal(inspect(new Set),"Set (0) {}","empty Set should show as empty");var nestedSet=new Set;nestedSet.add(set),nestedSet.add(nestedSet),t.equal(inspect(nestedSet),"Set (2) {"+expectedString+", [Circular]}","Set containing a Set should work"),t.end()})),test("WeakSet",{skip:"function"!=typeof WeakSet},(function(t){var map=new WeakSet;map.add({a:1});var expectedString="WeakSet { ? }";t.equal(inspect(map),expectedString,"new WeakSet([{ a: 1 }]) should not show size or contents"),t.equal(inspect(new WeakSet),"WeakSet { ? }","empty WeakSet should not show as empty"),t.end()})),test("WeakRef",{skip:"function"!=typeof WeakRef},(function(t){var ref=new WeakRef({a:1}),expectedString="WeakRef { ? }";t.equal(inspect(ref),expectedString,"new WeakRef({ a: 1 }) should not show contents"),t.end()})),test("FinalizationRegistry",{skip:"function"!=typeof FinalizationRegistry},(function(t){var registry=new FinalizationRegistry((function(){})),expectedString="FinalizationRegistry [FinalizationRegistry] {}";t.equal(inspect(registry),expectedString,"new FinalizationRegistry(function () {}) should work normallys"),t.end()})),test("Strings",(function(t){var str="abc";t.equal(inspect(str),"'"+str+"'","primitive string shows as such"),t.equal(inspect(str,{quoteStyle:"single"}),"'"+str+"'","primitive string shows as such, single quoted"),t.equal(inspect(str,{quoteStyle:"double"}),'"'+str+'"',"primitive string shows as such, double quoted"),t.equal(inspect(Object(str)),"Object("+inspect(str)+")","String object shows as such"),t.equal(inspect(Object(str),{quoteStyle:"single"}),"Object("+inspect(str,{quoteStyle:"single"})+")","String object shows as such, single quoted"),t.equal(inspect(Object(str),{quoteStyle:"double"}),"Object("+inspect(str,{quoteStyle:"double"})+")","String object shows as such, double quoted"),t.end()})),test("Numbers",(function(t){var num=42;t.equal(inspect(num),String(num),"primitive number shows as such"),t.equal(inspect(Object(num)),"Object("+inspect(num)+")","Number object shows as such"),t.end()})),test("Booleans",(function(t){t.equal(inspect(!0),String(!0),"primitive true shows as such"),t.equal(inspect(Object(!0)),"Object("+inspect(!0)+")","Boolean object true shows as such"),t.equal(inspect(!1),String(!1),"primitive false shows as such"),t.equal(inspect(Object(!1)),"Object("+inspect(!1)+")","Boolean false object shows as such"),t.end()})),test("Date",(function(t){var now=new Date;t.equal(inspect(now),String(now),"Date shows properly"),t.equal(inspect(new Date(NaN)),"Invalid Date","Invalid Date shows properly"),t.end()})),test("RegExps",(function(t){t.equal(inspect(/a/g),"/a/g","regex shows properly"),t.equal(inspect(new RegExp("abc","i")),"/abc/i","new RegExp shows properly");var match="abc abc".match(/[ab]+/);delete match.groups,t.equal(inspect(match),"[ 'ab', index: 0, input: 'abc abc' ]","RegExp match object shows properly"),t.end()}));