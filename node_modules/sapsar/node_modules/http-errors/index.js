/*!
 * http-errors
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */
"use strict";var deprecate=require("depd")("http-errors"),setPrototypeOf=require("setprototypeof"),statuses=require("statuses"),inherits=require("inherits"),toIdentifier=require("toidentifier");function codeClass(status){return Number(String(status).charAt(0)+"00")}function createError(){for(var err,msg,status=500,props={},i=0;i<arguments.length;i++){var arg=arguments[i],type=typeof arg;if("object"===type&&arg instanceof Error)status=(err=arg).status||err.statusCode||status;else if("number"===type&&0===i)status=arg;else if("string"===type)msg=arg;else{if("object"!==type)throw new TypeError("argument #"+(i+1)+" unsupported type "+type);props=arg}}"number"==typeof status&&(status<400||status>=600)&&deprecate("non-error status code; use only 4xx or 5xx status codes"),("number"!=typeof status||!statuses.message[status]&&(status<400||status>=600))&&(status=500);var HttpError=createError[status]||createError[codeClass(status)];for(var key in err||(err=HttpError?new HttpError(msg):new Error(msg||statuses.message[status]),Error.captureStackTrace(err,createError)),HttpError&&err instanceof HttpError&&err.status===status||(err.expose=status<500,err.status=err.statusCode=status),props)"status"!==key&&"statusCode"!==key&&(err[key]=props[key]);return err}function createHttpErrorConstructor(){function HttpError(){throw new TypeError("cannot construct abstract class")}return inherits(HttpError,Error),HttpError}function createClientErrorConstructor(HttpError,name,code){var className=toClassName(name);function ClientError(message){var msg=null!=message?message:statuses.message[code],err=new Error(msg);return Error.captureStackTrace(err,ClientError),setPrototypeOf(err,ClientError.prototype),Object.defineProperty(err,"message",{enumerable:!0,configurable:!0,value:msg,writable:!0}),Object.defineProperty(err,"name",{enumerable:!1,configurable:!0,value:className,writable:!0}),err}return inherits(ClientError,HttpError),nameFunc(ClientError,className),ClientError.prototype.status=code,ClientError.prototype.statusCode=code,ClientError.prototype.expose=!0,ClientError}function createIsHttpErrorFunction(HttpError){return function(val){return!(!val||"object"!=typeof val)&&(val instanceof HttpError||val instanceof Error&&"boolean"==typeof val.expose&&"number"==typeof val.statusCode&&val.status===val.statusCode)}}function createServerErrorConstructor(HttpError,name,code){var className=toClassName(name);function ServerError(message){var msg=null!=message?message:statuses.message[code],err=new Error(msg);return Error.captureStackTrace(err,ServerError),setPrototypeOf(err,ServerError.prototype),Object.defineProperty(err,"message",{enumerable:!0,configurable:!0,value:msg,writable:!0}),Object.defineProperty(err,"name",{enumerable:!1,configurable:!0,value:className,writable:!0}),err}return inherits(ServerError,HttpError),nameFunc(ServerError,className),ServerError.prototype.status=code,ServerError.prototype.statusCode=code,ServerError.prototype.expose=!1,ServerError}function nameFunc(func,name){var desc=Object.getOwnPropertyDescriptor(func,"name");desc&&desc.configurable&&(desc.value=name,Object.defineProperty(func,"name",desc))}function populateConstructorExports(exports,codes,HttpError){codes.forEach((function(code){var CodeError,name=toIdentifier(statuses.message[code]);switch(codeClass(code)){case 400:CodeError=createClientErrorConstructor(HttpError,name,code);break;case 500:CodeError=createServerErrorConstructor(HttpError,name,code)}CodeError&&(exports[code]=CodeError,exports[name]=CodeError)}))}function toClassName(name){return"Error"!==name.substr(-5)?name+"Error":name}module.exports=createError,module.exports.HttpError=createHttpErrorConstructor(),module.exports.isHttpError=createIsHttpErrorFunction(module.exports.HttpError),populateConstructorExports(module.exports,statuses.codes,module.exports.HttpError);