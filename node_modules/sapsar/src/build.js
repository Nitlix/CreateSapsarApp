const Log=require("./util/Log.js"),{VERSION:VERSION}=require("./formats/INFO.JS");Log.sapsar(`Starting Sapsar ${VERSION}...`);const{SapsarCompiler:SapsarCompiler,SapsarUnknownPageHandler:SapsarUnknownPageHandler,setBuildStatus:setBuildStatus,importCache:importCache,exportCache:exportCache,CachePage:CachePage,SapsarLoader:SapsarLoader,SapsarTouch:SapsarTouch,ImportMiddleware:ImportMiddleware}=require("./util/SapsarCompiler.js"),ScanDirectory=require("./util/ScanDirectory.js"),ListCycle=require("lixtools/list/cycle"),SapsarErrorPage=require("./util/SapsarErrorPage.js"),createServer=require("./util/CreateServer.js"),path=require("path"),{SAPSAR_LOADER_PATH:SAPSAR_LOADER_PATH}=require("./formats/SAPSAR_LOADER"),{SAPSAR_TOUCH_PATH:SAPSAR_TOUCH_PATH}=require("./formats/SAPSAR_TOUCH");let listener;const pagesDirectory=path.join(__dirname,"../../../pages");async function map(command,port=null){if("gen_cache"==command)Log.sapsar("This process will generate a unique build file cache.");else{setBuildStatus(!1);try{await importCache()}catch(e){Log.sapsar("No critical file cache file was found (at root/sapsar.js). If this code is in a deployment, expect build errors."),setBuildStatus(!0)}}const startTime=Date.now();let app;app=createServer(),Log.sapsar("Created a server instance..."),Log.sapsar("Importing compiler middleware..."),ImportMiddleware(),Log.sapsar("Mapping your pages...");const files=ScanDirectory(pagesDirectory),NormalPages=[],DynamicRoutes=[];for(let x=0;x<files.length;x++){const file=files[x];if(".js"!=path.extname(file))return;let OriginalName=file.split(".js")[0],AccessName=file.split(".js")[0];if(AccessName.endsWith("index")&&(AccessName=AccessName.split("index")[0]),AccessName.includes(";")){AccessName=AccessName.split(";").join(":");const split=AccessName.split("/"),all=[];let stop=!1;if(ListCycle(split,(query=>{all.includes(query)&&(stop=!0)})),stop)return void Log.router(`The main router could not route this query scheme: ${data.access}. Please change your routing format so that the paths being accessed are not the same.`);DynamicRoutes.push({original:OriginalName,access:AccessName})}else NormalPages.push({original:OriginalName,access:AccessName})}for(let x=0;x<NormalPages.length;x++){const data=NormalPages[x];try{await CachePage(data.original),app.get(`/${data.access}`,(async(req,res)=>{await SapsarCompiler(data.original,req,res)}))}catch(e){Log.buildError(`Error trying to save page function: ${data.original}`),app.get(`/${data.access}`,(async(req,res)=>{res.status(400).end(await SapsarErrorPage(`Something went wrong caching page function: ${data.original}`,e.name,e.message,e.stack))}))}}for(let x=0;x<DynamicRoutes.length;x++){const data=DynamicRoutes[x];try{await CachePage(data.original),app.get(`/${data.access}`,(async(req,res)=>{await SapsarCompiler(data.original,req,res,!0)}))}catch(e){Log.buildError(`Error trying to save dynamic route page function: ${data.original}`),app.get(`/${data.access}`,(async(req,res)=>{res.status(400).end(await SapsarErrorPage(`Something went wrong caching page function: ${data.original}`,e.name,e.message,e.stack))}))}}return app.get(`${SAPSAR_LOADER_PATH}:id`,(async(req,res)=>{SapsarLoader(req.params.id,res)})),app.post(`${SAPSAR_TOUCH_PATH}:id`,(async(req,res)=>{await SapsarTouch(req.params.id,null,res,res)})),app.all("*",(async(req,res)=>{const path=req.path;await SapsarUnknownPageHandler(path,req,res)})),Log.sapsar(`Built the app in ${Date.now()-startTime} ms.`),await exportCache(),port?(listener=app.listen(port),Log.sapsar(`Ready to serve on http://localhost:${port}. Any debugging or errors will be logged below.`),Log.sapsar("==============================================================================================================")):Log.sapsar("Build cache created successfully. Your app is ready to be deployed. Exiting..."),app}module.exports=map;